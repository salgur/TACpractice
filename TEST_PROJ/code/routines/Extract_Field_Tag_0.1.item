package routines;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class Extract_Field_Tag {

    /**
     * helloExample: not return value, only print "hello" + message.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined Routines
     * 
     * {param} string("world"),string(".*?") input: The string need to be matched with pattern.
     * 
     * {example} Extract_Field_Tag("world",".*?") # world !.
     */
	public static String main(String args1,String args2) {
        Pattern pattern1 = Pattern.compile(args2);
        String mydata = args1;

        Matcher matcher1 = pattern1.matcher(mydata);
        if(matcher1.find() && mydata != null && ! mydata.isEmpty()) {
        	String Tag=matcher1.group(1);
        	Pattern pattern2 = Pattern.compile("(?<=>)(.*?)(?=<)");
        	Matcher matcher2 = pattern2.matcher(Tag);
        	if(matcher2.find()) {
        	return(matcher2.group(1));
        	}
            else return("");
        }
        else return("");
        

    }
}
