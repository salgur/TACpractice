package routines;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class GetCityStateZip {

    /**
     * helloExample: not return value, only print "hello" + message.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("world") input: The string need to be printed.
     * 
     * {example} helloExemple("world") # hello world !.
     */
    public static String[] getCityStateZipArr(String inputString) {
    	String[] AddrArry= inputString.split("\\s+");
    	String cityName = "";
    	String state = "";
    	String zip = "";

    	String dummyinputString = "";
    	String dummyNumInputString = "";

    	boolean anyOneSplitIsState = false;

    	for (int index = 0; index < inputString.length(); index++) { // Not Number
    		char chr = inputString.charAt(index);
    		
    		if(!Character.isDigit(chr)) {
    			dummyinputString = dummyinputString + String.valueOf(chr);
    		}
    	}
    	if(inputString.equals(dummyinputString)){
    		if(StringHandling.LEN(StringHandling.TRIM(inputString)) == 2){
    			state = StringHandling.TRIM(inputString);
    		}
    		else{
    			if(StringHandling.LEN(StringHandling.TRIM(AddrArry[AddrArry.length - 1])) == 2){
    				state = StringHandling.TRIM(AddrArry[AddrArry.length - 1]);
    				for(int index = 0; index < AddrArry.length; index++) {
    					if((index != (AddrArry.length - 1)))
    					{
    						cityName = StringHandling.TRIM(cityName) + " " + StringHandling.TRIM(AddrArry[index]);
    					}
    				}
    			}
    			else{
    				cityName = StringHandling.TRIM(inputString);
    			}
    		}
    	}
    	else{
    		for (int index = 0; index < inputString.length(); index++) { // Number
    			char chr = inputString.charAt(index);
    		
    			if(Character.isDigit(chr) || chr == '-' || chr == ' ') {
    				dummyNumInputString = dummyNumInputString + String.valueOf(chr);
    			}
    		}
    		if(inputString.equals(dummyNumInputString)){
    			zip = StringHandling.TRIM(inputString);
    		}
    		else{
    			for(int index = 0; index < AddrArry.length; index++)
    			{
    				if(StringHandling.LEN(StringHandling.TRIM(AddrArry[index])) == 2){
    					anyOneSplitIsState = true;
    				}
    				else{
    					continue;
    				}
    			}
    			if(anyOneSplitIsState == true){
    				for(int index = 0; index < AddrArry.length; index++)
    				{
    					if((index != (AddrArry.length - 1)) && (index != (AddrArry.length - 2)))
    					{
    						cityName = StringHandling.TRIM(cityName) + " " + StringHandling.TRIM(AddrArry[index]);
    					}
    				}

    				state = StringHandling.TRIM(AddrArry[AddrArry.length - 2]);
    				zip = StringHandling.TRIM(AddrArry[AddrArry.length - 1]);
    			}
    			else{
    				for(int index = 0; index < AddrArry.length; index++)
    				{
    					if((index != (AddrArry.length - 1)))
    					{
    						cityName = StringHandling.TRIM(cityName) + " " + StringHandling.TRIM(AddrArry[index]);
    					}
    				}

    				zip = StringHandling.TRIM(AddrArry[AddrArry.length - 1]);
    			}
    		}
    	}
    	String[] cityStateZipArr = new String[3];
    	cityStateZipArr[0] = cityName;
    	cityStateZipArr[1] = state;
    	cityStateZipArr[2] = zip;
    	
    	return cityStateZipArr;
    }
}
