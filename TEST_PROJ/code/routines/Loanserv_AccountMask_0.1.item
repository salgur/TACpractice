package routines;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class Loanserv_AccountMask {

    /**
     * helloExample: not return value, only print "hello" + message.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} User Defined
     * 
     * {param} string("world") input: The string need to be printed.
     * 
     * {example} helloExemple("world") # hello world !.
     */
  
    public static String MaskAccountNumber(String AccountNumber, int AccountNumberMasking, int AccountNumberMaxMaskAcctLength, String AccountNumberMaskCharacter)
    {
    	String masked = "";
    	if (AccountNumberMasking==99)
    	{
    		 masked = AccountNumber;
    	}
    	else if (AccountNumberMasking==0)
    	{
    		 masked = AccountNumber.replaceFirst ("^0*", "");
    	}
    	else if ((AccountNumberMasking!=99) && (AccountNumberMasking!=0))
    	{
    		String AccNumMasked = "";
    		
    		if (AccountNumber.length() > AccountNumberMaxMaskAcctLength)
    		{
    			AccNumMasked = AccountNumber.substring(AccountNumber.length() - AccountNumberMaxMaskAcctLength);
    			//System.out.println(AccNumMasked);
    		}
    		else if (AccountNumber.length() < AccountNumberMaxMaskAcctLength)
    		{
    			AccNumMasked = String.format("%0"+AccountNumberMaxMaskAcctLength+"d", Long.valueOf(AccountNumber)); 
    			//System.out.println(AccNumMasked);
    		}
    		else
    		{
    			AccNumMasked = AccountNumber;
    		}
    		int masklen = AccountNumberMaxMaskAcctLength - AccountNumberMasking;
    		
    		StringBuffer maskedbuf = new StringBuffer();
                for (int i = 0; i < masklen; i++) {
                    maskedbuf.append(AccountNumberMaskCharacter);
                }
                maskedbuf.append(AccNumMasked.substring(masklen, AccNumMasked.length()));
                masked = maskedbuf.toString();
    	}
    	
    	return masked;
    }

}
